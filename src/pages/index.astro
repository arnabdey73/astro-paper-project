---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Socials from "@/components/Socials.astro";
import LinkButton from "@/components/LinkButton.astro";
import Card from "@/components/Card.astro";
import Hr from "@/components/Hr.astro";
import getSortedPosts from "@/utils/getSortedPosts";
import IconRss from "@/assets/icons/IconRss.svg";
import IconArrowRight from "@/assets/icons/IconArrowRight.svg";
import { SITE } from "@/config";

const posts = await getCollection("blog");

const sortedPosts = getSortedPosts(posts);

// Get the target blog IDs we want to feature and filter them
const featuredPostIdSuffixes = [
  "iac-azure-core-governance-enterprise-scale-automation-platform",
  "iac-module-library-azure-accelerate-cloud-journey",
  "openstack-devops-suite-comprehensive-automation-platform"
];

// Filter and manually sort the posts in the specific order
const featuredPosts = featuredPostIdSuffixes
  .map(targetId => posts.find(post => post.id.endsWith(targetId)))
  .filter(Boolean) as Array<typeof posts[0]>; // Filter out any undefined values just in case

// Filter out featured posts from the recent posts list
const recentPosts = sortedPosts.filter(post => 
  !featuredPosts.some(fp => fp && fp.id === post.id)
);
---

<Layout>
  <Header />
  <main id="main-content" data-layout="index">
    <section id="hero">
      <div class="hero-image mb-6">
        <div class="hero-banner mx-auto shadow-md rounded-lg overflow-hidden" style="width: 720px; height: 360px; max-width: 100%;">
          <svg width="100%" height="100%" viewBox="0 0 720 360" xmlns="http://www.w3.org/2000/svg" class="hero-svg">
            <defs>
              <!-- Advanced gradient backgrounds -->
              <linearGradient id="heroGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" style="stop-color: var(--color-bg); stop-opacity: 1" />
                <stop offset="30%" style="stop-color: var(--color-card); stop-opacity: 0.8" />
                <stop offset="70%" style="stop-color: var(--color-card-muted); stop-opacity: 0.6" />
                <stop offset="100%" style="stop-color: var(--color-accent); stop-opacity: 0.1" />
              </linearGradient>
              
              <!-- DevOps pipeline gradient -->
              <linearGradient id="pipelineGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                <stop offset="0%" style="stop-color: var(--color-accent); stop-opacity: 0.8" />
                <stop offset="50%" style="stop-color: var(--color-accent); stop-opacity: 0.6" />
                <stop offset="100%" style="stop-color: var(--color-accent); stop-opacity: 0.4" />
              </linearGradient>
              
              <!-- Circuit pattern for tech feel -->
              <pattern id="circuitPattern" width="80" height="80" patternUnits="userSpaceOnUse">
                <rect width="80" height="80" fill="none"/>
                <path d="M20 20 L60 20 L60 40 L40 40 L40 60 L60 60" fill="none" stroke="var(--color-accent)" stroke-width="1" opacity="0.1"/>
                <circle cx="20" cy="20" r="2" fill="var(--color-accent)" opacity="0.15"/>
                <circle cx="60" cy="60" r="2" fill="var(--color-accent)" opacity="0.15"/>
              </pattern>
              
              <!-- Cloud infrastructure pattern -->
              <pattern id="cloudPattern" width="100" height="60" patternUnits="userSpaceOnUse">
                <ellipse cx="30" cy="30" rx="20" ry="12" fill="none" stroke="var(--color-accent)" stroke-width="0.5" opacity="0.1"/>
                <ellipse cx="70" cy="30" rx="15" ry="8" fill="none" stroke="var(--color-accent)" stroke-width="0.5" opacity="0.1"/>
              </pattern>
            </defs>
            
            <!-- Background layers -->
            <rect width="100%" height="100%" fill="url(#heroGradient)"/>
            <rect width="100%" height="100%" fill="url(#circuitPattern)"/>
            <rect width="100%" height="100%" fill="url(#cloudPattern)"/>
            
            <!-- DevOps Pipeline Flow -->
            <g transform="translate(50, 50)">
              <!-- Source Control -->
              <g opacity="0.8">
                <rect x="0" y="20" width="80" height="50" rx="8" fill="none" stroke="var(--color-accent)" stroke-width="2"/>
                <text x="40" y="40" text-anchor="middle" font-family="ui-monospace, monospace" font-size="10" fill="var(--color-accent)" font-weight="600">GIT</text>
                <text x="40" y="52" text-anchor="middle" font-family="ui-monospace, monospace" font-size="8" fill="var(--color-text-base)" opacity="0.7">Source</text>
                <circle cx="20" cy="35" r="3" fill="var(--color-accent)" opacity="0.6">
                  <animate attributeName="opacity" values="0.6;1;0.6" dur="2s" repeatCount="indefinite"/>
                </circle>
              </g>
              
              <!-- Pipeline Arrow -->
              <path d="M 85 45 L 115 45" stroke="url(#pipelineGradient)" stroke-width="3" marker-end="url(#arrowhead)"/>
              
              <!-- CI/CD -->
              <g transform="translate(120, 0)" opacity="0.8">
                <rect x="0" y="20" width="80" height="50" rx="8" fill="none" stroke="var(--color-accent)" stroke-width="2"/>
                <text x="40" y="40" text-anchor="middle" font-family="ui-monospace, monospace" font-size="10" fill="var(--color-accent)" font-weight="600">CI/CD</text>
                <text x="40" y="52" text-anchor="middle" font-family="ui-monospace, monospace" font-size="8" fill="var(--color-text-base)" opacity="0.7">Pipeline</text>
                <rect x="15" y="30" width="12" height="6" rx="1" fill="var(--color-accent)" opacity="0.5"/>
                <rect x="32" y="30" width="12" height="6" rx="1" fill="var(--color-accent)" opacity="0.7"/>
                <rect x="49" y="30" width="12" height="6" rx="1" fill="var(--color-accent)" opacity="0.4"/>
              </g>
              
              <!-- Pipeline Arrow -->
              <path d="M 205 45 L 235 45" stroke="url(#pipelineGradient)" stroke-width="3" marker-end="url(#arrowhead)"/>
              
              <!-- Azure Cloud -->
              <g transform="translate(240, 0)" opacity="0.9">
                <ellipse cx="40" cy="45" rx="35" ry="25" fill="none" stroke="var(--color-accent)" stroke-width="2.5"/>
                <ellipse cx="25" cy="35" rx="18" ry="12" fill="none" stroke="var(--color-accent)" stroke-width="1.5" opacity="0.7"/>
                <ellipse cx="55" cy="35" rx="20" ry="14" fill="none" stroke="var(--color-accent)" stroke-width="1.5" opacity="0.7"/>
                <text x="40" y="48" text-anchor="middle" font-family="ui-monospace, monospace" font-size="12" fill="var(--color-accent)" font-weight="700">AZURE</text>
                <text x="40" y="60" text-anchor="middle" font-family="ui-monospace, monospace" font-size="8" fill="var(--color-text-base)" opacity="0.7">Cloud Infrastructure</text>
              </g>
              
              <!-- Arrow marker definition -->
              <defs>
                <marker id="arrowhead" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
                  <polygon points="0 0, 10 3.5, 0 7" fill="var(--color-accent)" opacity="0.8"/>
                </marker>
              </defs>
            </g>
            
            <!-- Infrastructure as Code Section -->
            <g transform="translate(50, 150)">
              <rect x="0" y="0" width="300" height="80" rx="12" fill="var(--color-card)" opacity="0.3" stroke="var(--color-border)" stroke-width="1"/>
              <text x="20" y="25" font-family="ui-monospace, monospace" font-size="14" fill="var(--color-accent)" font-weight="600">Infrastructure as Code</text>
              
              <!-- Terraform logo placeholder -->
              <g transform="translate(20, 35)">
                <rect x="0" y="0" width="40" height="30" rx="4" fill="none" stroke="var(--color-accent)" stroke-width="1.5"/>
                <text x="20" y="18" text-anchor="middle" font-family="ui-monospace, monospace" font-size="8" fill="var(--color-accent)">TF</text>
              </g>
              
              <!-- Bicep/ARM -->
              <g transform="translate(80, 35)">
                <rect x="0" y="0" width="40" height="30" rx="4" fill="none" stroke="var(--color-accent)" stroke-width="1.5"/>
                <text x="20" y="18" text-anchor="middle" font-family="ui-monospace, monospace" font-size="8" fill="var(--color-accent)">ARM</text>
              </g>
              
              <!-- Ansible -->
              <g transform="translate(140, 35)">
                <rect x="0" y="0" width="40" height="30" rx="4" fill="none" stroke="var(--color-accent)" stroke-width="1.5"/>
                <text x="20" y="18" text-anchor="middle" font-family="ui-monospace, monospace" font-size="8" fill="var(--color-accent)">ANS</text>
              </g>
              
              <!-- Python -->
              <g transform="translate(200, 35)">
                <rect x="0" y="0" width="40" height="30" rx="4" fill="none" stroke="var(--color-accent)" stroke-width="1.5"/>
                <text x="20" y="18" text-anchor="middle" font-family="ui-monospace, monospace" font-size="8" fill="var(--color-accent)">PY</text>
              </g>
            </g>
            
            <!-- Monitoring & Observability -->
            <g transform="translate(400, 150)">
              <rect x="0" y="0" width="250" height="80" rx="12" fill="var(--color-card)" opacity="0.3" stroke="var(--color-border)" stroke-width="1"/>
              <text x="20" y="25" font-family="ui-monospace, monospace" font-size="14" fill="var(--color-accent)" font-weight="600">Monitoring & Analytics</text>
              
              <!-- Metrics visualization -->
              <g transform="translate(20, 35)">
                <path d="M 0 25 L 40 10 L 80 20 L 120 5 L 160 15" fill="none" stroke="var(--color-accent)" stroke-width="2" opacity="0.7"/>
                <circle cx="0" cy="25" r="2" fill="var(--color-accent)"/>
                <circle cx="40" cy="10" r="2" fill="var(--color-accent)"/>
                <circle cx="80" cy="20" r="2" fill="var(--color-accent)"/>
                <circle cx="120" cy="5" r="2" fill="var(--color-accent)">
                  <animate attributeName="cy" values="5;15;5" dur="2s" repeatCount="indefinite"/>
                </circle>
                <circle cx="160" cy="15" r="2" fill="var(--color-accent)"/>
              </g>
            </g>
            
            <!-- Main Title Area -->
            <rect x="60" y="260" width="600" height="80" rx="12" fill="var(--color-card)" opacity="0.4" stroke="var(--color-border)" stroke-width="1.5"/>
            
            <!-- Enhanced title -->
            <text x="360" y="290" text-anchor="middle" font-family="ui-monospace, monospace" font-size="28" font-weight="700" fill="var(--color-text-base)">
              DevOps Engineering Blog
            </text>
            <text x="360" y="315" text-anchor="middle" font-family="ui-monospace, monospace" font-size="14" fill="var(--color-accent)" font-weight="600">
              Azure • Python • Infrastructure as Code • Automation
            </text>
            
            <!-- Animated code brackets -->
            <text x="80" y="295" font-family="ui-monospace, monospace" font-size="24" fill="var(--color-accent)" opacity="0.6">
              {
              <animate attributeName="opacity" values="0.6;1;0.6" dur="3s" repeatCount="indefinite"/>
            </text>
            <text x="640" y="295" font-family="ui-monospace, monospace" font-size="24" fill="var(--color-accent)" opacity="0.6">
              }
              <animate attributeName="opacity" values="0.6;1;0.6" dur="3s" begin="1.5s" repeatCount="indefinite"/>
            </text>
          </svg>
        </div>
      </div>      <h1>Hej! 👋</h1>
      <a
        href="/rss.xml"
        class="rss-link"
        aria-label="rss feed"
        title="RSS Feed"
      >
        <IconRss class="rss-icon" />
      </a>

      <p>This is Arnab Dey! 👨‍💻</p>

      <p>
        I'm a DevOps/Cloud Engineer with 14+ years in IT, specializing in Azure, Python automation, and infrastructure as code. 
        This blog is where I share my experiences, projects, and insights about cloud infrastructure, DevOps practices, and automation techniques.
      </p>
      <p class="mt-2">
        Currently working on open-source DevOps tools and Azure automation projects. For more about my work and projects, visit my <a href="https://arnabdey.dev" class="text-accent hover:underline" target="_blank" rel="noopener noreferrer">portfolio</a>. Check out my latest articles below!
      </p>
      
      <div class="social-wrapper">
        <div class="social-links">Find me on:</div>
        <Socials />
      </div>

      <div class="flex flex-col sm:flex-row sm:gap-4">
        <LinkButton
          href="https://github.com/arnabdey73"
          class="link-button"
          title="View my GitHub projects"
        >
          View my projects
          <IconArrowRight class="h-6 w-6" />
        </LinkButton>
        <LinkButton
          href="https://arnabdey.dev"
          class="link-button"
          title="Visit my portfolio website"
        >
          Visit my portfolio
          <IconArrowRight class="h-6 w-6" />
        </LinkButton>
      </div>
    </section>

    <Hr />    {
      featuredPosts.length > 0 && (
        <section id="featured">
          <h2>Featured Posts</h2>
          <ul>            {featuredPosts.map(post => <Card {...post} variant="h2" />)}
          </ul>
        </section>
      )
    }

    <div class="read-more-divider mx-auto max-w-3xl px-4">
      <div class="relative flex items-center justify-center my-16">
        <!-- Background pattern -->
        <div class="absolute inset-0 flex items-center justify-center" aria-hidden="true">
          <svg width="100%" height="60" viewBox="0 0 800 60" class="opacity-20">
            <defs>
              <pattern id="grid" width="40" height="40" patternUnits="userSpaceOnUse">
                <circle cx="20" cy="20" r="0.5" fill="var(--color-accent)" opacity="0.3"/>
              </pattern>
            </defs>
            <rect width="100%" height="100%" fill="url(#grid)" />
            <line x1="0" y1="30" x2="800" y2="30" stroke="var(--color-border)" stroke-width="1" stroke-dasharray="8,4" opacity="0.5"/>
          </svg>
        </div>
        
        <!-- Main content -->
        <div class="relative flex items-center justify-center bg-background rounded-full px-8 py-4 shadow-sm border" 
             style="background-color: var(--color-bg); border-color: var(--color-border);">
          <div class="flex items-center space-x-4">
            <!-- Left icon -->
            <div class="read-more-icon">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 2L2 7V17L12 22L22 17V7L12 2Z" stroke="var(--color-accent)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M12 22V12" stroke="var(--color-accent)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M2 7L12 12L22 7" stroke="var(--color-accent)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
            
            <!-- Text -->
            <div class="text-center">
              <div class="text-sm font-medium uppercase tracking-wider text-muted mb-1" style="color: var(--color-text-base); opacity: 0.7;">
                Continue Reading
              </div>
              <div class="text-lg font-bold" style="color: var(--color-accent);">
                Recent Posts
              </div>
            </div>
            
            <!-- Right icon -->
            <div class="read-more-icon">
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M12 2L2 7V17L12 22L22 17V7L12 2Z" stroke="var(--color-accent)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M12 22V12" stroke="var(--color-accent)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                <path d="M2 7L12 12L22 7" stroke="var(--color-accent)" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
              </svg>
            </div>
          </div>
          
          <!-- Subtle glow effect -->
          <div class="absolute inset-0 rounded-full bg-gradient-to-r from-transparent via-accent/5 to-transparent"></div>
        </div>
        
        <!-- Floating particles -->
        <div class="absolute inset-0 pointer-events-none">
          <div class="floating-particle" style="left: 20%; top: 30%; animation-delay: 0s;"></div>
          <div class="floating-particle" style="left: 80%; top: 70%; animation-delay: 1s;"></div>
          <div class="floating-particle" style="left: 70%; top: 20%; animation-delay: 2s;"></div>
        </div>
      </div>
    </div>

    {
      recentPosts.length > 0 && (
        <section id="recent-posts">
          <h2>Recent Posts</h2>
          <ul>
            {recentPosts
              .slice(0, SITE.postPerIndex)
              .map(post => <Card {...post} variant="h2" />)
            }
          </ul>
        </section>
      )
    }

    <div class="all-posts-btn-wrapper">
      <LinkButton href="/posts" class="link-button">
        All Posts
        <IconArrowRight class="h-6 w-6" />
      </LinkButton>
    </div>
  </main>

  <Footer />
</Layout>

<style>
  /* ===== Hero Section ===== */
  #hero {
    @apply pb-6 pt-8;
  }
  #hero h1 {
    @apply my-4 inline-block text-3xl font-bold sm:my-8 sm:text-5xl;
  }
  #hero .rss-link {
    @apply mb-6;
  }
  #hero .rss-icon {
    @apply mb-2 h-6 w-6 scale-110 fill-skin-accent sm:mb-3 sm:scale-125;
  }
  #hero p {
    @apply my-2;
  }
  
  /* ===== Hero Banner ===== */
  .hero-banner {
    @apply transition-all duration-300;
    border: 1px solid var(--color-border);
  }
  
  .hero-banner:hover {
    @apply shadow-lg;
    transform: translateY(-2px);
  }
  
  .hero-svg {
    @apply w-full h-full;
  }
  
  /* Responsive hero */
  @media (max-width: 768px) {
    .hero-banner {
      height: 200px !important;
    }
  }
  
  .social-wrapper {
    @apply mt-4 mb-4 flex flex-col sm:flex-row sm:items-center;
  }
  .social-links {
    @apply mr-2 mb-1 whitespace-nowrap sm:mb-0;
  }

  /* ===== Featured & Recent Posts Sections ===== */
  #featured,
  #recent-posts {
    @apply pb-6 pt-12;
  }
  #featured h2,
  #recent-posts h2 {
    @apply text-3xl font-black tracking-wide mb-8 relative;
    color: var(--color-text-base);
    background: linear-gradient(135deg, var(--color-text-base) 0%, var(--color-accent) 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    font-weight: 900;
  }
  
  #featured h2::after,
  #recent-posts h2::after {
    content: '';
    position: absolute;
    bottom: -8px;
    left: 0;
    width: 60px;
    height: 4px;
    background: linear-gradient(90deg, var(--color-accent) 0%, transparent 100%);
    border-radius: 2px;
  }
  
  #featured h2:hover,
  #recent-posts h2:hover {
    transform: translateX(4px);
    transition: transform 0.2s ease-in-out;
  }
  
  #featured h2:hover::after,
  #recent-posts h2:hover::after {
    width: 80px;
    transition: width 0.2s ease-in-out;
  }
  .all-posts-btn-wrapper {
    @apply my-8 text-center;
  }
  
  /* ===== Read More Divider ===== */
  .read-more-divider {
    @apply mb-12;
  }
  
  .read-more-icon {
    @apply flex-shrink-0;
    animation: gentle-pulse 3s ease-in-out infinite;
  }
  
  .floating-particle {
    @apply absolute w-1 h-1 rounded-full;
    background-color: var(--color-accent);
    opacity: 0.3;
    animation: float 4s ease-in-out infinite;
  }
  
  @keyframes gentle-pulse {
    0%, 100% { 
      transform: scale(1);
      opacity: 0.8;
    }
    50% { 
      transform: scale(1.05);
      opacity: 1;
    }
  }
  
  @keyframes float {
    0%, 100% { 
      transform: translateY(0px);
      opacity: 0.3;
    }
    50% { 
      transform: translateY(-8px);
      opacity: 0.6;
    }
  }
  
  .read-more-divider:hover .read-more-icon {
    animation-duration: 1.5s;
  }
  
  .read-more-divider:hover .floating-particle {
    animation-duration: 2s;
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const indexLayout = (document.querySelector("#main-content") as HTMLElement)
      ?.dataset?.layout;
    if (indexLayout) {
      sessionStorage.setItem("backUrl", "/");
    }
  });
</script>
