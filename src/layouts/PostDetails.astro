---
import { render, type CollectionEntry } from "astro:content";
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Tag from "@/components/Tag.astro";
import Datetime from "@/components/Datetime.astro";
import EditPost from "@/components/EditPost.astro";
import ShareLinks from "@/components/ShareLinks.astro";
import BackButton from "@/components/BackButton.astro";
import { getPath } from "@/utils/getPath";
import { slugifyStr } from "@/utils/slugify";
import { SITE } from "@/config";

// Import post-specific CSS
import "../styles/post-details.css";

export interface Props {
  post: CollectionEntry<"blog">;
  posts: CollectionEntry<"blog">[];
}

const { post, posts } = Astro.props;

const {
  title,
  author,
  description,
  ogImage: initOgImage,
  canonicalURL,
  pubDatetime,
  modDatetime,
  timezone,
  tags,
  hideEditPost,
} = post.data;

// Import the reading time utility 
import { getReadingTime } from "@/utils/getReadingTime";

// Render post content with optimized loading
const { Content, remarkPluginFrontmatter } = await render(post);

// Calculate reading time
const postContent = post.body;
const readingTime = getReadingTime(postContent);

let ogImageUrl: string | undefined;

// Determine OG image source
if (typeof initOgImage === "string") {
  // Handle both absolute paths and URLs
  ogImageUrl = initOgImage.startsWith("http") || initOgImage.startsWith("/") 
    ? initOgImage 
    : `/${initOgImage}`; // Ensure relative paths are properly prefixed
}
// Remove the 'else if' branch as we now use string paths only

// Use dynamic OG image if enabled and no remote|local ogImage
if (!ogImageUrl && SITE.dynamicOgImage) {
  ogImageUrl = `${getPath(post.id, post.filePath)}/index.png`;
}

// Resolve OG image URL (or fallback to SITE.ogImage / default `og.png`)
const ogImage = ogImageUrl
  ? (() => {
      try {
        // If ogImageUrl is already a full URL, use it directly
        if (ogImageUrl.startsWith('http://') || ogImageUrl.startsWith('https://')) {
          return ogImageUrl;
        }
        // Otherwise, resolve against Astro.url.origin
        return new URL(ogImageUrl, Astro.url.origin).href;
      } catch (e) {
        console.warn("Error creating ogImage URL. Using ogImageUrl directly.", e);
        return ogImageUrl;
      }
    })()
  : undefined;

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDatetime,
  modDatetime,
  canonicalURL,
  ogImage,
  scrollSmooth: true,
};

/* ========== Prev/Next Posts ========== */

const allPosts = posts.map(({ data: { title }, id }) => ({
  slug: id,
  title,
}));

const currentPostIndex = allPosts.findIndex(a => a.slug === post.id);

const prevPost = currentPostIndex !== 0 ? allPosts[currentPostIndex - 1] : null;
const nextPost =
  currentPostIndex !== allPosts.length ? allPosts[currentPostIndex + 1] : null;
---

<Layout {...layoutProps}>
  <Header />
  <BackButton />
  <main
    id="main-content"
    class:list={[
      "w-full pb-12",
      { "mt-8": !SITE.showBackButton },
    ]}
    data-pagefind-body
  >
    <!-- Enhanced post header with elegant styling -->
    <div class="post-header mb-8 bg-skin-card px-6 py-8 rounded-lg border border-skin-line shadow-sm">
      <h1
        transition:name={slugifyStr(title)}
        class="text-3xl font-bold text-accent sm:text-4xl md:text-5xl mb-6 leading-tight"
      >
        {title}
      </h1>
      
      <div class="post-meta-container border-t border-b border-skin-line py-4 my-6 flex flex-wrap items-center justify-between gap-4">
        <!-- Author and date info -->
        <div class="flex items-center gap-4">
          <span class="author-avatar bg-accent/10 rounded-full w-10 h-10 flex items-center justify-center">
            <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-accent">
              <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path>
              <circle cx="12" cy="7" r="4"></circle>
            </svg>
          </span>
          <div>
            <div class="text-sm opacity-75">Written by</div>
            <div class="font-medium">{author || SITE.author}</div>
          </div>
        </div>

        <!-- Date info -->
        <div class="flex flex-col items-start">
          <div class="text-sm opacity-75">Published</div>
          <Datetime {pubDatetime} {modDatetime} {timezone} size="lg" class="font-medium" />
        </div>

        <!-- Reading time -->
        <div class="reading-time">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <circle cx="12" cy="12" r="10" />
            <polyline points="12 6 12 12 16 14" />
          </svg>
          <span>{readingTime} min read</span>
        </div>

        <EditPost class="max-sm:hidden" {hideEditPost} {post} />
      </div>
      
      <!-- Post description styled as a lead paragraph -->
      {description && (
        <div class="post-description text-lg text-skin-base/90 italic bg-skin-accent/5 p-4 rounded-md border-l-4 border-accent">
          {description}
        </div>
      )}

      <!-- Tags display in header -->
      {tags && tags.length > 0 && (
        <div class="mt-6 flex flex-wrap gap-2">
          {tags.map(tag => <Tag tag={slugifyStr(tag)} tagName={tag} size="sm" />)}
        </div>
      )}
    </div>
    
    <!-- Simplified table of contents container -->
    <div class="toc-container mb-8">
      <div class="toc-title">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="inline-block mr-2">
          <line x1="21" y1="10" x2="7" y2="10"></line>
          <line x1="21" y1="6" x2="3" y2="6"></line>
          <line x1="21" y1="14" x2="3" y2="14"></line>
          <line x1="21" y1="18" x2="7" y2="18"></line>
        </svg>
        Table of Contents
      </div>
      <ul class="toc-list" id="toc-list"></ul>
    </div>
    
    <!-- Enhanced article content with styling -->
    <article id="article" class="prose-full w-full relative bg-skin-card p-8 rounded-lg border border-skin-line shadow-sm" style="max-width: none; width: 100%; box-sizing: border-box;">
      <Content />
    </article>

    <div class="post-footer my-10">
      <!-- More elegant decorative divider -->
      <div class="divider-container flex items-center justify-center my-12">
        <div class="divider-line flex-grow h-0.5 bg-gradient-to-r from-transparent via-accent/30 to-transparent"></div>
        <div class="divider-icon mx-4 relative">
          <div class="bg-skin-fill p-2 rounded-full">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-accent">
              <path d="M12 2L2 7V17L12 22L22 17V7L12 2Z" />
              <path d="M12 22V12" />
              <path d="M22 7L12 12L2 7" />
            </svg>
          </div>
        </div>
        <div class="divider-line flex-grow h-0.5 bg-gradient-to-r from-accent/30 via-transparent to-transparent"></div>
      </div>

      <EditPost class="sm:hidden mb-6" {hideEditPost} {post} />

      <!-- Footer grid layout with author card and share options -->
      <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        <!-- Author info card -->
        <div class="bg-skin-card p-6 rounded-lg border border-skin-line shadow-sm">
          <div class="flex items-start gap-4">
            <div class="author-avatar bg-accent/10 rounded-full w-16 h-16 flex items-center justify-center flex-shrink-0">
              <svg xmlns="http://www.w3.org/2000/svg" width="28" height="28" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="text-accent">
                <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"></path>
                <circle cx="12" cy="7" r="4"></circle>
              </svg>
            </div>
            <div>
              <h3 class="text-xl font-bold mb-2">About the author</h3>
              <div class="font-medium text-lg mb-2">{author || SITE.author}</div>
              <p class="text-sm opacity-80">
                Writer and developer specializing in cloud infrastructure, DevOps, and modern web development.
              </p>
            </div>
          </div>
        </div>

        <!-- Enhanced share section -->
        <div class="bg-skin-card p-6 rounded-lg border border-skin-line shadow-sm">
          <h3 class="text-xl font-bold mb-4">Share this post</h3>
          <div class="flex items-center justify-start gap-4">
            <ShareLinks />
          </div>
          
          <!-- Enhanced tags section -->
          <div class="mt-6">
            <h4 class="text-base font-bold mb-3">Topics</h4>
            <ul class="flex flex-wrap gap-2">
              {tags.map(tag => <Tag tag={slugifyStr(tag)} tagName={tag} size="md" />)}
            </ul>
          </div>
        </div>
      </div>
    </div>

    <!-- Decorative divider before navigation -->
    <div class="divider-container flex items-center justify-center my-12">
      <div class="divider-line flex-grow h-0.5 bg-gradient-to-r from-transparent via-accent/30 to-transparent"></div>
    </div>

    <!-- Enhanced Previous/Next Post Navigation -->
    <div data-pagefind-ignore class="post-nav grid grid-cols-1 gap-6 sm:grid-cols-2">
      {
        prevPost && (
          <a
            href={`/posts/${prevPost.slug}`}
            class="flex flex-col w-full gap-2 p-4 bg-skin-card rounded-lg border border-skin-line shadow-sm hover:border-accent transition-all"
          >
            <div class="text-accent flex items-center gap-2 text-sm uppercase font-bold tracking-wider">
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                <path d="M15 6l-6 6l6 6" />
              </svg>
              Previous Post
            </div>
            <div class="font-medium text-lg hover:text-accent transition-colors">{prevPost.title}</div>
          </a>
        )
      }
      {
        nextPost && (
          <a
            href={`/posts/${nextPost.slug}`}
            class="flex flex-col w-full gap-2 p-4 bg-skin-card rounded-lg border border-skin-line shadow-sm hover:border-accent transition-all items-end text-right sm:col-start-2"
          >
            <div class="text-accent flex items-center gap-2 text-sm uppercase font-bold tracking-wider">
              Next Post
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                <path d="M9 6l6 6l-6 6" />
              </svg>
            </div>
            <div class="font-medium text-lg hover:text-accent transition-colors">{nextPost.title}</div>
          </a>
        )
      }
    </div>
  </main>
  <Footer />
</Layout>

<script is:inline data-astro-rerun>
  /** Create and update progress indicator - Optimized version */
  function setupProgressBar() {
    // Create elements only once
    const progressContainer = document.createElement("div");
    progressContainer.className = "progress-container fixed top-0 z-50 h-1 w-full";
    
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0";
    progressBar.id = "myBar";
    
    progressContainer.appendChild(progressBar);
    document.body.appendChild(progressContainer);
    
    // Use throttled scroll event for better performance
    let lastScrollTime = 0;
    const throttleInterval = 10; // ms
    
    function throttledScrollHandler() {
      const now = Date.now();
      if (now - lastScrollTime > throttleInterval) {
        lastScrollTime = now;
        
        const winScroll = window.scrollY || document.documentElement.scrollTop;
        const height = document.documentElement.scrollHeight - window.innerHeight;
        
        if (height > 0) {
          const scrolled = (winScroll / height) * 100;
          progressBar.style.width = scrolled + "%";
        }
      }
    }
    
    // Use passive event listener for better scrolling performance
    window.addEventListener("scroll", throttledScrollHandler, { passive: true });
  }
  
  // Run once on page load
  setupProgressBar();
  
  /** Generate table of contents dynamically - Optimized */
  function generateTableOfContents() {
    const article = document.getElementById('article');
    const tocList = document.getElementById('toc-list');
    
    if (!article || !tocList) return;
    
    const headings = article.querySelectorAll('h2, h3, h4');
    
    // If no headings are found, hide the TOC container
    if (headings.length === 0) {
      const tocContainer = document.querySelector('.toc-container');
      if (tocContainer) {
        tocContainer.style.display = 'none';
      }
      return;
    }
    
    // Clear existing TOC - more efficient approach
    tocList.innerHTML = '';
    
    // Create document fragment for better performance
    const fragment = document.createDocumentFragment();
    
    // Create TOC items
    headings.forEach((heading, index) => {
      // Ensure heading has an ID for linking
      if (!heading.id) {
        heading.id = `heading-${index}`;
      }
      
      const listItem = document.createElement('li');
      const link = document.createElement('a');
      link.href = `#${heading.id}`;
      
      // Use textContent instead of innerText for better performance
      link.textContent = heading.textContent.replace('#', '');
      
      // Set className based on heading level
      if (heading.tagName === 'H3') {
        link.className = 'pl-4 text-sm';
      } else if (heading.tagName === 'H4') {
        link.className = 'pl-8 text-xs';
      }
      
      // Event delegation for better performance - we'll add one listener to the parent
      listItem.appendChild(link);
      fragment.appendChild(listItem);
    });
    
    // Append all items at once
    tocList.appendChild(fragment);
    
    // Add a single event listener to the parent element (event delegation)
    tocList.addEventListener('click', (e) => {
      if (e.target.tagName === 'A') {
        e.preventDefault();
        const targetId = e.target.getAttribute('href').substring(1);
        const targetElement = document.getElementById(targetId);
        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start'
          });
          
          // Update URL without reloading
          history.pushState(null, null, e.target.getAttribute('href'));
        }
      }
    });
  }

  /** Attaches links to headings in the document - Optimized */
  function addHeadingLinks() {
    const article = document.getElementById('article');
    if (!article) return;
    
    // Only search within the article for better performance
    const headings = article.querySelectorAll("h2, h3, h4, h5, h6");
    
    // Process headings in batches
    const processHeadings = (index = 0, batchSize = 10) => {
      const limit = Math.min(index + batchSize, headings.length);
      
      for (let i = index; i < limit; i++) {
        const heading = headings[i];
        
        // Skip if already processed
        if (heading.querySelector('.heading-link')) continue;
        
        // Generate an ID if needed
        if (!heading.id) {
          heading.id = 'heading-' + i;
        }
        
        // Add group class
        heading.classList.add("group");
        
        // Create link
        const link = document.createElement("a");
        link.className = "heading-link ml-2 opacity-0 group-hover:opacity-100 focus:opacity-100";
        link.href = "#" + heading.id;
        
        // Add span with # symbol
        const span = document.createElement("span");
        span.setAttribute('aria-hidden', "true");
        span.textContent = "#";
        link.appendChild(span);
        
        heading.appendChild(link);
      }
      
      // Continue processing if needed
      if (limit < headings.length) {
        setTimeout(() => {
          processHeadings(limit, batchSize);
        }, 0);
      } else {
        // Generate TOC after all headings have been processed
        generateTableOfContents();
      }
    };
    
    // Start processing headings
    processHeadings();
  }
  
  // Start heading links processing after DOM is ready, but before window load
  document.addEventListener('DOMContentLoaded', addHeadingLinks);

  /** Attaches copy buttons to code blocks in the document - Optimized */
  function attachCopyButtons() {
    const copyButtonLabel = "Copy";
    
    // Process code blocks in batches for better performance
    function processBatch(codeBlocks, index = 0, batchSize = 5) {
      // Process a small batch at a time
      const endIndex = Math.min(index + batchSize, codeBlocks.length);
      
      for (let i = index; i < endIndex; i++) {
        const codeBlock = codeBlocks[i];
        if (!codeBlock) continue;
        
        // Create wrapper with className instead of style for better performance
        const wrapper = document.createElement("div");
        wrapper.className = "code-block-wrapper";
        
        // Create copy button
        const copyButton = document.createElement("button");
        copyButton.className = "copy-code";
        copyButton.textContent = copyButtonLabel;
        codeBlock.setAttribute("tabindex", "0");
        
        // Add language indicator if available
        const code = codeBlock.querySelector('code');
        if (code && code.className) {
          const match = code.className.match(/language-(\w+)/);
          if (match) {
            const langIndicator = document.createElement('span');
            langIndicator.className = 'language-indicator';
            langIndicator.textContent = match[1];
            wrapper.appendChild(langIndicator);
          }
        }
        
        wrapper.appendChild(copyButton);
        
        // Add the wrapper to the DOM
        const parent = codeBlock.parentNode;
        if (parent) {
          parent.insertBefore(wrapper, codeBlock);
          wrapper.appendChild(codeBlock);
        }
        
        // Add event listener
        copyButton.addEventListener("click", () => {
          copyCode(codeBlock, copyButton);
        });
      }
      
      // Schedule next batch if needed
      if (endIndex < codeBlocks.length) {
        setTimeout(() => {
          processBatch(codeBlocks, endIndex, batchSize);
        }, 0);
      }
    }
    
    function copyCode(block, button) {
      const code = block.querySelector("code");
      if (!code) return;
      
      // Use textContent instead of innerText for better performance
      const text = code.textContent || '';
      
      // Use the clipboard API asynchronously but don't await it directly
      navigator.clipboard.writeText(text).then(() => {
        // Visual feedback
        button.textContent = "Copied!";
        button.classList.add('copied');
        
        setTimeout(() => {
          button.textContent = copyButtonLabel;
          button.classList.remove('copied');
        }, 1500);
      }).catch(err => {
        console.error('Failed to copy text: ', err);
      });
    }
    
    // Get code blocks and start processing in batches
    const codeBlocks = Array.from(document.querySelectorAll("pre"));
    if (codeBlocks.length > 0) {
      processBatch(codeBlocks);
    }
  }
  
  // Defer non-critical operations to after page load
  window.addEventListener('DOMContentLoaded', attachCopyButtons);
  
  /** Add enhanced image captions - Optimized with better performance */
  function enhanceImages() {
    // Use a more specific selector and check if article exists
    const article = document.getElementById('article');
    if (!article) return;
    
    // Process images in batches for better performance
    const processImagesInBatches = (images, batchSize = 5) => {
      let index = 0;
      
      function processNextBatch() {
        const limit = Math.min(index + batchSize, images.length);
        
        for (; index < limit; index++) {
          const img = images[index];
          const paragraph = img.parentElement;
          
          // Only process images that are direct children of p tags
          if (paragraph && paragraph.tagName === 'P') {
            const nextElement = img.nextSibling;
            
            if (nextElement && nextElement.nodeType === 3 && nextElement.textContent.trim()) {
              // Use a streamlined approach with fewer style operations
              const figure = document.createElement('figure');
              figure.className = 'image-figure';
              
              const figcaption = document.createElement('figcaption');
              figcaption.className = 'image-caption';
              figcaption.textContent = nextElement.textContent.trim();
              
              // No need to clone, we can move the image directly
              figure.appendChild(img);
              figure.appendChild(figcaption);
              
              // Replace the paragraph with the figure
              paragraph.parentNode.insertBefore(figure, paragraph);
              paragraph.remove();
            }
          }
        }
        
        // Process next batch if there are more images
        if (index < images.length) {
          setTimeout(processNextBatch, 0);
        }
      }
      
      // Start processing
      processNextBatch();
    };
    
    const images = Array.from(article.querySelectorAll('img'));
    processImagesInBatches(images);
  }
  
  // Defer non-critical operations
  setTimeout(enhanceImages, 100);

  /* Handle page swap efficiently */
  document.addEventListener("astro:after-swap", () => {
    // Scroll to top instantly
    window.scrollTo(0, 0);
    
    // Reset any state needed after page swap
    const progressBar = document.getElementById("myBar");
    if (progressBar) progressBar.style.width = "0%";
  });
</script>
